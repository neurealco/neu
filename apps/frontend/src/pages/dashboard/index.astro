---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
import StatsCard from "../../components/dashboard/StatsCard.astro";
import YouTubeStats from "../../components/dashboard/YouTubeStats.astro";
import { fetchDashboardData, getSession } from "../../lib/api";

const session = await getSession(Astro.request);
if (!session) {
  return Astro.redirect("/login");
}

let dashboardData;
try {
  dashboardData = await fetchDashboardData(session.user.id);
} catch (error) {
  console.error("Error loading dashboard data:", error);
  dashboardData = {
    youtube: {
      subscribers: "0",
      views_today: "0",
      estimated_revenue: "0.00",
      engagement_rate: "0.0",
      daily_data: []
    }
  };
}
export const prerender = false;
---

<DashboardLayout title="Dashboard">
  <div class="dashboard-header">
    <h1>Dashboard</h1>
    <button class="btn" id="refresh-stats">Refresh Stats (50 Credits)</button>
  </div>

  <div class="stats-grid">
    <StatsCard
      title="Subscribers"
      value={dashboardData.youtube.subscribers.toLocaleString()}
      icon="üë•"
    />
    <StatsCard
      title="Views Today"
      value={dashboardData.youtube.views_today.toLocaleString()}
      icon="üëÄ"
    />
    <StatsCard
      title="Estimated Revenue"
      value={`$${parseFloat(dashboardData.youtube.estimated_revenue).toFixed(2)}`}
      icon="üíµ"
    />
    <StatsCard
      title="Engagement Rate"
      value={`${dashboardData.youtube.engagement_rate}%`}
      icon="üî•"
    />
  </div>

  <YouTubeStats stats={dashboardData.youtube} />
</DashboardLayout>

<script>
  const button = document.getElementById("refresh-stats");
  if (button) {
    button.addEventListener("click", async () => {
      try {
        const response = await fetch(
          `${import.meta.env.PUBLIC_API_BASE_URL}/dashboard/refresh`,
          {
            method: "POST",
            credentials: "include",
            headers: {
              "Content-Type": "application/json"
            }
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          
          // Manejar error de l√≠mite de uso
          if (errorData.error?.includes("Monthly usage limit exceeded")) {
            alert(`You've reached your monthly limit for stats refresh (${errorData.limit}). Upgrade your plan for more refreshes.`);
          } else {
            throw new Error(errorData.error || "Failed to refresh stats");
          }
        } else {
          // Eliminamos la declaraci√≥n de 'result' que no se usa
          // Solo recargamos la p√°gina
          alert("Stats refreshed successfully!");
          window.location.reload();
        }
      } catch (error) {
        console.error("Refresh error:", error);
        
        // Manejo seguro de errores
        let errorMessage = "Error refreshing stats";
        if (error instanceof Error) {
          errorMessage = error.message;
        } else if (typeof error === "string") {
          errorMessage = error;
        }
        
        alert(errorMessage);
      }
    });
  }
</script>

<style>
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
    gap: 15px;
  }

  .dashboard-header h1 {
    font-size: 2rem;
    margin: 0;
    background: linear-gradient(90deg, var(--primary), var(--secondary));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }

  #refresh-stats {
    background: var(--primary);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  #refresh-stats:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(99, 102, 241, 0.3);
  }

  #refresh-stats:disabled {
    background: var(--text-secondary);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    margin-bottom: 40px;
  }

  @media (max-width: 1024px) {
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style>
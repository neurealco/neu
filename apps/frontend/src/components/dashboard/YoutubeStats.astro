---
const { stats } = Astro.props;
const maxValue = Math.max(...stats.daily_data.map(d => d.new_subscribers));
const minValue = Math.min(...stats.daily_data.map(d => d.new_subscribers));
---

<div class="youtube-stats">
  <div class="stats-header">
    <h2>Subscriber Growth</h2>
    <div class="stats-summary">
      <div class="stat-item">
        <span class="stat-value">{stats.subscribers.toLocaleString()}</span>
        <span class="stat-label">Total</span>
      </div>
      <div class="stat-item">
        <span class="stat-value">+{stats.daily_data.reduce((acc, day) => acc + parseInt(day.new_subscribers), 0)}</span>
        <span class="stat-label">Last 7 days</span>
      </div>
    </div>
  </div>

  <div class="chart-container">
    <div class="chart-bars">
      {stats.daily_data.map((data) => {
        const height = ((data.new_subscribers - minValue) / (maxValue - minValue)) * 80;
        return (
          <div
            class="chart-bar"
            style={`height: ${height}%`}
            data-value={data.new_subscribers.toLocaleString()}
          >
            <span class="bar-label">{new Date(data.date).toLocaleDateString('en-US', { weekday: 'short' })}</span>
          </div>
        );
      })}
    </div>
  </div>
</div>

<style>
  .youtube-stats {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 16px;
    padding: 24px;
    margin-top: 30px;
  }

  .stats-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .stats-summary {
    display: flex;
    gap: 30px;
  }

  .stat-item {
    text-align: center;
  }

  .stat-value {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .stat-label {
    display: block;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .chart-container {
    height: 300px;
    position: relative;
    display: flex;
    align-items: flex-end;
    padding: 0 20px;
  }

  .chart-grid {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .grid-line {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    flex: 1;
  }

  .chart-bars {
    display: flex;
    justify-content: space-around;
    width: 100%;
    height: 100%;
    align-items: flex-end;
    z-index: 1;
  }

  .chart-bar {
    width: 40px;
    background: var(--primary);
    border-radius: 6px 6px 0 0;
    position: relative;
    transition: height 0.5s ease;
  }

  .chart-bar:hover {
    background: var(--primary-dark);
  }

  .chart-bar:hover::after {
    content: attr(data-value);
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    white-space: nowrap;
  }

  .bar-label {
    position: absolute;
    bottom: -25px;
    left: 0;
    right: 0;
    text-align: center;
    font-size: 0.8rem;
    color: var(--text-secondary);
  }
</style>
